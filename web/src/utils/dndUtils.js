const levelExperienceMap = {
  1: 0,
  2: 1000,
  3: 2250,
  4: 3750,
  5: 5500,
  6: 7500,
  7: 10000,
  8: 13000,
  9: 16500,
  10: 20500,
  11: 26000,
  12: 32000,
  13: 39000,
  14: 47000,
  15: 57000,
  16: 69000,
  17: 83000,
  18: 99000,
  19: 119000,
  20: 143000,
  21: 175000,
  22: 210000,
  23: 255000,
  24: 310000,
  25: 375000,
  26: 450000,
  27: 550000,
  28: 675000,
  29: 825000,
  30: 1000000
}

/**
 * Generated `level = f(experience)` function by WorlframAlpha.
 * InterpolatingPolynomial[{{0: 1}, {1000: 2}, {2250: 3}, {3750: 4}, {5500: 5}, {7500: 6}, {10000: 7}, {13000: 8}, {16500: 9}, {20500: 10}, {26000: 11}, {32000: 12}, {39000: 13}, {47000: 14}, {57000: 15}, {69000: 16}, {83000: 17}, {99000: 18}, {119000: 19}, {143000: 20}, {175000: 21}, {210000: 22}, {255000: 23}, {310000: 24}, {375000: 25}, {450000: 26}, {550000: 27}, {675000: 28}, {825000: 29}, {1000000: 30}}, x]
 */
export const toLevelByWolfram = (experience) => {
  const doubleLevel = 1 + (1 / 1000 + (-(1 / 11250000) + (1 / 92812500000 + (-(1 / 844593750000000) + (1 / 9049218750000000000 + (-(29 / 2727333984375000000000000) + (19829 / 18024320917968750000000000000000 + (-(41689237 / 416262679440029296875000000000000000000) + (23251851486671 / 3255469283460752082333984375000000000000000000000 + (-(4111353981838277 / 11009997116664263542453535156250000000000000000000000000) + (551655670194782181285373 / 36859302346039717746671764092610312500000000000000000000000000000000 + (-(6443156529135824418106305473 / 13715309543659032933818816747096204670937500000000000000000000000000000000000) + (2005310243417244922326436841932943141 / 169879027649611023891351103235072499470057591804062500000000000000000000000000000000000000 + (-(6315829255124518533169647364218564562507 / 26615469824525698677403208347775933769336423193795521328125000000000000000000000000000000000000000) + (82146111896670098159716997317240336066514709667 / 21356529362238078493603400533170892561811806760119970686380971250000000000000000000000000000000000000000000000 + (-(167904146780521917293474107989715843344918004726735097 / 3301941760872667833508204133827770299047673786022920317009343381160712500000000000000000000000000000000000000000000000000) + (24382458735190210868514333051037576603398815191804168277 / 43917402466417645250893029346062814957178382631136970566226420685679224650000000000000000000000000000000000000000000000000000000 + (-(13709467391044470342852639330190210900815195371628661912792781929025263 / 2754309181262677191887001980022848169731418216866145494389647754002179447352693802269100200000000000000000000000000000000000000000000000000000000000) + (3639682856297323778029458300345807195640624092105733918579385960572420718383125953 / 99077107523861876852860060916240175274645821901302635229875992665237586738478169700290338914126805616000000000000000000000000000000000000000000000000000000000000000 + (-(78487798645765072009549445451682375625694638299241437477417190095159750137003751798603457 / 357765260328000873499757005984486039612418433860521438419633643276381938417140587714967153045392052167739117568000000000000000000000000000000000000000000000000000000000000000000) + (6006211194728870899130461321553452436138716962403182296821897549927999868352975419825830246224493 / 5541559394955660114374287310786276199804591284449376862081528218470563756817161819358819233956193634627104502881675079680000000000000000000000000000000000000000000000000000000000000000000000 + (-(250121489956170983052110782806053219269684851855732648626756053734197998752231134177796567528951411325006247 / 57087676879024066318454933194076947516798968081157132608510981027992728671257317782381708399875723072939795292237517177069696976486400000000000000000000000000000000000000000000000000000000000000000000000000) + (4138787647199129658030352672097970752366948326658813733892292145511556937498128451062778209390191373707831374203577853540773386527 / 285608476806656403169418691651293855326823235280643499923080853329520244904678533581040158961902216495232264600850437841055821934009522773643318219053621248000000000000000000000000000000000000000000000000000000000000000000000000000000 + (-(1121811529913897188618104047201885758095586090227654226833824734425496236246436263715026155177077201535877981752489884092272358103432243843417 / 28435752223146472807699155605860376700148561482205756813507700952346732060013729842741285804020702062810666849870013975154677152700040239813303426149134920576824510054400000000000000000000000000000000000000000000000000000000000000000000000000000000000) + (148118343444794448441392435352172102152167873309754307296283505145595086190465669368407142067517848829092990693360360359353200805668606205361360529069572977167297289 / 1660620269495141949240397331306854245247280578799024309550166154277258892083267065176610606306257419600805182041014295261443774904067801578519353029046045064179516199896751399032813818423336960000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + (-(42363177982803485437648238506941557397936619168551548170295376116968990766580927171524844114674223852875730788158949385792222997507146843732643117180170369599217084649673241733 / 257557621327151112620159684550892765961252597440848704019852639525417385453436365802831797602080333096046009136736366497001317377237339182272107625239863006544343082993923087818876556936851967244580652032000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) + (23271224493767298165917801840844139333106104694203372571956246863792052752945485199388122586473833966873464769183195001094810033868015814068564325940589519008207625273351454218298409 / 94406890854849063749874143461255775105671281653770338783994097759175028608445537831435350549709799602840502955476175091244118389155932880959597578695512697183847543890577684006279087895049994670519017188145664000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 + (-(28498411023854281132077381119827786666382553243727911683462456964213224792864662802177002637800098699405487202007594485724674238760932040475347039242672083887194794773256096363357907556790267 / 94484653639326239561164295159765128871806194011954111017319295409000567325565189574706253388737719891163832143721005424688424877017678984458728274015788410685401425013664960883754034530673037661983359842689728759323724800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) + (4570384759516977997434449857684085403747344142804234151125655022444447939607875224718474616746425802649743630625733632046399841674310285414312174187564683809119162900504940491103731487974803431825262582129940076458733 * (-825000 + experience)) / 15035252973345539786261266651017955155021759860991533118759728745530817079794340308750927305708795454873603902115316974065792173762990441505257169865356177616004194624969004578236416375138128987378733860794606962704923950196403962878640638969864320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) * (-675000 + experience)) * (-550000 + experience)) * (-450000 + experience)) * (-375000 + experience)) * (-310000 + experience)) * (-255000 + experience)) * (-210000 + experience)) * (-175000 + experience)) * (-143000 + experience)) * (-119000 + experience)) * (-99000 + experience)) * (-83000 + experience)) * (-69000 + experience)) * (-57000 + experience)) * (-47000 + experience)) * (-39000 + experience)) * (-32000 + experience)) * (-26000 + experience)) * (-20500 + experience)) * (-16500 + experience)) * (-13000 + experience)) * (-10000 + experience)) * (-7500 + experience)) * (-5500 + experience)) * (-3750 + experience)) * (-2250 + experience)) * (-1000 + experience)) * experience;
  return Math.trunc(doubleLevel)
}

/**
 * From experience to level. (5000 -> 4, 5500 -> 5, 5501 -> 5)
 */
export const calculateLevel = (experience) => {
  if (!experience || experience < 0 || experience > 1000000 || !Number.isInteger(experience)) {
    throw new Error(`Experience is invalid. ${experience}`)    
  }
  let level = 1
  let closestExperience = levelExperienceMap[level]
  Object.entries(levelExperienceMap).forEach(entry => {
    const minLevelExperience = entry[1]
    if (experience >= minLevelExperience && minLevelExperience > closestExperience) {
      level = entry[0]
      closestExperience = minLevelExperience
    }
  })

  return Number.parseInt(level)
}

/**
 * From level to minimal required experience. (5 -> 5500).
 */
export const getMinLevelExperience = (level) => {
  if (!level || level < 1 || level > 30) {
    throw new Error(`Level is invalid. ${level}`)
  }
  return levelExperienceMap[level]
}

/**
 * Calculate percentage of level.
 * 46 means that user has completed 46% of tasks to get next level.
 */
export const calculatePercentage = (experience) => {
  const level = calculateLevel(experience)
  const minLevelExperience = getMinLevelExperience(level)
  const nextLevelExperience = getMinLevelExperience(level + 1)
  return 100 * (experience - minLevelExperience) / (nextLevelExperience - minLevelExperience)
}